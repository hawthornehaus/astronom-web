<h1>Review Meals</h1>

<div class="inventory-pane">
    <% if @astro %>
        <strong>(showing meals for <%=@astro.name%>)</strong>
        <strong class="right">Eaten in the last week</strong>
        <div class="row">
            <div class="small-12 medium-12 large-12 columns">
                <div id="graph-container" style="width:100%; height:400px">
                </div>
            </div>
        </div>
    <% end %>

    <br>
    <div class="row">
        <div class="small-12 medium-12 large-12 columns text-center">
            <%= paginate @meals %>
        </div>
    </div>
    <br>
    <div class="row inventory-item inventory-item">
        <div class="small-3 medium-3 large-3 columns">
            <strong>Time</strong>
        </div>
        <div class="small-6 medium-6 large-6 columns">
            <strong>Meal</strong>
        </div>
        <div class="small-3 medium-3 large-3 columns">
            <strong>Eater</strong>
        </div>
    </div>
    <% @meals.each do |m| %>
    <div class="row inventory-item inventory-item">
        <div class="small-3 medium-3 large-3 columns">
            <%= m.occurred_at %>
        </div>
        <div class="small-6 medium-6 large-6 columns">
            <%= link_to( food_path(m.food) , :data=>{:colorbox => true,
                        :colorbox_iframe=>true,
                        :colorbox_height=>"75%",
                        :colorbox_width=>"75%" }) do %>
                <%= m.food.display_name %>
            <% end %>
        </div>
        <div class="small-3 medium-3 large-3 columns">
            <%= m.astronaut.name %>
        </div>
    </div>
    <% end %>
</div>

<% if @astro %>
<script>
(function basic_axis(container) {

  var
    d1 = [],
    d2 = [],
    d3 = [],
    d4 = [],
    d5 = [],                        // Data
    ticks = [[ 0, "Lower"], 10, 20, 30, [40, "Upper"]], // Ticks for the Y-Axis
    graph;
        
  for(var i = 0; i <= 10; i += 0.1){
    d1.push([i, 4 + Math.pow(i,1.5)]);
    d2.push([i, Math.pow(i,3)]);
    d3.push([i, i*5+3*Math.sin(i*4)]);
    d4.push([i, i]);
    if( i.toFixed(1)%1 == 0 ){
      d5.push([i, 2*i]);
    }
  }
        
  d3[30][1] = null;
  d3[31][1] = null;

  function ticksFn (n) { return '('+n+')'; }
  
  var data = [];
  var ticks = [];
  var graphs = [];
  var care_about = ["water", "energy", "sodium", "total_sugar", "carbohydrates"    ];
  
  var i = 0;
  gon = {
	  nutrients: ["water", "energy", "sodium", "total_sugar", "carbohydrates" ],
	  meals: []
  };
  /*
  gon = {
	  nutrients: ["water", "energy", "sodium", "total_sugar", "carbohydrates" ];
  }
  
  Object.keys(gon.nutrients).forEach( function (k) {
		  if (_.contains(care_about,k) ) {
		  var nut = gon.nutrients[k];
		  var graph = {};
		  graph.label: 
		  data.push( [i, nut.amount]);
		  ticks.push( [i, k] );
		  i++;
	  }
  });
  */
  
  // setup the graphs we'll care about
  graphs = {};
  gon.nutrients.forEach(n) {
	  graphs.n = {};
	  graphs.n.label = n;
	  graphs.n.data = [];
  };
  
  // gon.meals is ordered by time
  gon.meals.forEach( function(meal) {
	  // for each nutrient in push in the thing
	  graphs.n.data.push( 1 );
	  graphs.n.lines = { show : true };
	  graphs.n.points = { show : true };
  });

  graph = Flotr.draw(container, Object.values(graphs) , {
      xaxis : {
        noTicks : 7,              // Display 7 ticks.
        tickFormatter : ticksFn,  // Displays tick values between brackets.
        min : 1,                  // Part of the series is not displayed.
        max : 7.5                 // Part of the series is not displayed.
      },
      yaxis : {
        ticks : ticks,            // Set Y-Axis ticks
        max : 40                  // Maximum value along Y-Axis
      },
      grid : {
        verticalLines : true,
        
      },
      legend : {
        position : 'nw'
      },
  });
})(document.getElementById("graph-container"));
</script>
<% end %>
